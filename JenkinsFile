pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS=credentials('Docker_Login')
        DB_PASSWORD=credentials('DB_PASSWORD')
    }

    stages {
        stage('Backup') {
            steps {
                script {
                    // Create a backup of the data in cinema-vol volume
                    sh 'docker run --rm -v cinema-vol:/volume -v $(pwd)/backup:/backup alpine tar -czf /backup/cinema-data-backup.tar.gz -C /volume .'
                }
            }
        }
        stage('Testing') {
            steps {
                sh "docker build -t wojciechprzybylski/pytest:latest -f ./Dockerfile-test ."
                sh "docker run -t wojciechprzybylski/pytest:latest"
            }
        }    
        stage('Build') {
            steps {
                script {
                    // Build Docker images
                    sh "docker build -t wojciechprzybylski/mysql-init:latest -f ./db/Dockerfile-create ."
                    sh "docker build -t wojciechprzybylski/cinema-app:latest ."
                    sh "docker build -t wojciechprzybylski/cinema-db:latest -f ./db/DockerFile ."
                    sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                    sh "docker push wojciechprzybylski/mysql-init:latest"
                    sh "docker push wojciechprzybylski/cinema-db:latest"
                    sh "docker push wojciechprzybylski/cinema-app:latest"
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Restore data from the backup before starting containers
                    sh "docker pull wojciechprzybylski/cinema-db:latest && docker pull wojciechprzybylski/cinema-app:latest && docker pull wojciechprzybylski/mysql-init:latest"
                    sh "docker-compose up -d"
                    sh 'docker run --rm -v cinema-vol:/volume -v $(pwd)/backup:/backup alpine tar -xzf /backup/cinema-data-backup.tar.gz -C /volume'
                }
            }
        }
        stage('Clean up') {
            steps {
                sh '''
                    docker images -f dangling=true -q | xargs -r docker rmi
                '''
            }
        }
    }
}